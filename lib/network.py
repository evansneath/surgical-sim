#!/usr/bin/env python

"""Network module

Contains the neural network class for regression training and testing of the
surgicalsim environment.

Author:
    Evan Sneath - evansneath@gmail.com

License:
    Open Software License v3.0

Classes:
    NeuralNetwork: Artificial neural networks class for path prediction.
"""


# Import external modules
import numpy as np

# Import pybrain neural network modules
from pybrain.structure.modules.evolinonetwork import EvolinoNetwork
from pybrain.supervised.trainers.evolino import EvolinoTrainer


class NeuralNetwork(object):
    """NeuralNetwork class

    Responsible for training and testing of the neural network for use in
    the surgicalsim testing environment.
    """
    def __init__(self, training_data):
        """Initialize

        Creates an Evolino neural network and its trainer class object for
        training and testing of given datasets.

        Arguments:
            training_data: Supervised learning datasets used as the primary
                training method for the neural network.
        """
        super(NeuralNetwork, self).__init__()

        # Determine the input/output dimensions of the neural net
        self.in_dim = training_data.indim
        self.hid_dim = 50
        self.out_dim = training_data.outdim

        # Create neural network
        self.net = EvolinoNetwork(self.in_dim, self.out_dim, hiddim=self.hid_dim)

        # Create trainer
        self.trainer = EvolinoTrainer(
            evolino_network=self.net,
            dataset=training_data,
            wtRatio=1.0/10.0
        )

        return

    def reset(self):
        """Reset

        Resets the neural network to a clean state.
        """
        self.net.reset()
        return

    def train(self):
        """Train

        Trains the neural network using the inputted training dataset for
        a single epoch.
        """
        self.trainer.train()
        return

    def test(self, testing_dataset):
        """Test

        Given a testing dataset containing input data only, return the
        trained results generated by the trained neural network.

        Arguments:
            testing_dataset: A supervised learning dataset containing only
                input testing data.

        Returns:
            output: The neural network output given the testing dataset.
        """
        output = self.net.activateOnDataset(testing_dataset)
        return output

    def extrapolate(self, washout, length):
        output = self.net.extrapolate(washout, length)
        return output


if __name__ == '__main__':
    pass
